%YAML:1.0

#common parameters
imu_topic: "/imu_raw"
image_topic: "/camera/infra1/image_rect_raw"
output_path: "/home/ohrad/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 0.33405533 # 1.350332e-01
   k2: 0.18101047 #-2.922065e-01
   p1: -0.09114611
   p2: 0.15692563
projection_parameters:
   fx: 387.06226903 #6.140422e+02
   fy: 387.25295011 #6.145987e+02
   cx: 322.27135062 #3.247341e+02
   cy: 245.47108794 #2.478645e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   
   # m.o. 3-25
   #   data: [-0.00085431, -0.99999769,  0.00197375, 
   #          -0.01163181,  0.00198355,  0.99993038, 
          #          -0.99993198,  0.00083129, -0.01163348]

   data: [ -9.0468033445544993e-02, 3.6721251957493040e-02,
       -9.9522212826040479e-01, -9.9505658009294740e-01,
       -4.4436283356802608e-02, 8.8813395021027475e-02,
       -4.0962633438572149e-02, 9.9833710057079816e-01,
       4.0559786558473698e-02 ]


#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   # data: [0.07494282, -0.01077138, -0.00641822]
   #   data: [ 0.01854869, -0.0064374, -0.05860705] # m.o. extrinsics cal 3-25
   data: [ 5.1488337019576627e-02, 4.4582482101547680e-02,
   #       -5.7028111032331269e-02 ]

extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ -9.0157704035429553e-02, -7.3859207513704561e-03,
       -9.9590011375524723e-01, -9.9347979094660865e-01,
       7.0732154046183493e-02, 8.9414022192661702e-02,
       6.9781755378771460e-02, 9.9746799976673006e-01,
       -1.3714811614303990e-02 ]
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [ 1.9845646167494079e-02, -8.1180651799922413e-02,
       -5.0510808883431506e-02 ]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08829          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.0006108         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 4.0e-5         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 4.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/ohrad/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
