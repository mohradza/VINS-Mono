%YAML:1.0

#common parameters
imu_topic: "/imu/data"
image_topic: "/camera/color/image_raw"
output_path: "/home/ohrad/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1:  1.102290e-01 # 1.350332e-01
   k2: -2.326347e-01 #-2.922065e-01
   p1: -6.5484100374765971e-04
   p2: -3.5829351558557421e-04
projection_parameters:
   fx: 6.084869e+02 #6.140422e+02
   fy: 6.086249e+02 #6.145987e+02
   cx: 3.264972e+02 #3.247341e+02
   cy: 2.416639e+02 #2.478645e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # data: [ 0.99964621,  0.01105994,  0.02418954,
   #        -0.01088975,  0.9999151,  -0.00715601, 
   #        -0.02426663,  0.00689006,  0.99968178]
   data: [ 0.00863643, -0.04440923, 0.99897609, 
           0.99959725,  0.02739026,-0.00742417,
          -0.02703251,  0.99863787, 0.04462790 ]
          #data: [ .02312064, .11855365, -.99267843,
          #-.99792897,-.05688226, -.0300362,
          #-.06002666, .9913170, .1169929 ]
       # data: [ .023120644980833216, .11855365002595702, -.99267843123601396, 
       #-.99792897281217896,-.056882226780548439, -.030036269717063524,
       #-.060026669053847792, .99131702514483711, .11699296842242535 ]

           
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   # data: [0.07494282, -0.01077138, -0.00641822]
   data: [ 0.15483438, -0.04916959, -0.011379433 ]
   #data: [ -.0748389, .2409778,
       #-.05827627 ]
   #data: [ -.074838970664788521, .24097781765310411,
   #   -.058276270351298808 ]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0002         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/ohrad/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
